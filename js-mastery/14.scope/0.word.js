// 1. scope
// 스코프란?
// 범위, 영역
// 식별자(변수, 함수, 클래스 이름)가 유효한 범위를 뜻한다.

// 선언된 위치에 따라 유효 범위가 결정됨

// 유효 범위는 블럭 ({}) 안에서만 유효

// 스코프의 장점
// 이름 충돌 방지, 메모리 절약

// 포인트는?
// 변수는 최대한 필요한 곳에서 정의 해야 겠다!!!

// 2. garbage collection
// 아무도 object 를 참조하고 있지 않다면? 알아서 GC(Garage Collector)가 메모리에서 청소해줌

// 3. 실행 컨텍스트 Execution Context
// 코드의 실행 순서와 스코프를 기억!
// 전역 스코프와 블록 스코프({ })
// 각각의 블록은, "렉시컬 환경" 이라는 내부 오브젝트를 가지고 있다.
// 렉시컬 환경은 또 두가지로 나눌 수 있다.
// 1. 환경 레코드 (Environment Record)
// 2. 외부 환경 참조 (Outer Lexical Environment Reference)

// 실행 컨텍스트 스택
// 1. 전역 스코프 렉시컬 환경 생성
// 1-1. 외부 렉시컬 환경 참조 > 환경 레코드 a = 1 > 전역 렉시컬 환경 (bottom-top)

// 2. 블럭 1 스코프 렉시컬 환경 생성
// 2-1. 외부 렉시컬 환경 참조 > 환경 레코드 a = 2 > 블럭 1 렉시컬 환경
// 2-2. 블럭 1 스코프 환경은 전역 렉시컬 환경 내에 있으므로, 외부 렉시컬 환경 참조가 바로 전역을 가리키고 있음을 알 수 있다.
// 이렇게 스코프가 연결되어있는게 스코프 체인

// 3. 블럭 2 스코프 렉시컬 환경 생성
// 3-1. 외부 렉시컬 환경 참조 > 환경 레코드 a = 3 > 블럭 2 렉시컬 환경
// 3-2. 외부 렉시컬 환경은 블럭 1

// 4. 블럭이 모두 끝나게 되면, 블럭2 -> 전역 순서대로 스택에서 빠지게 됨

// 만약 해당하는 변수가 없다면, 스코프 체인을 통해서 부모 (외부 렉시컬 환경)에서 변수를 찾아감

const a = 1; // 전역 스코프
{
  // 블럭 1 스코프
  const a = 2;
  {
    // 블럭 2 스코프
    const a = 3;
  }
}

// Point!
// 메모리 절약 뿐만 아니라, 성능을 위해서라도 변수는 최대한 필요한 곳에서 정의 해야 한다!
// 중첩된 함수나, 중첩된 스코프가 있는데, 필요한 곳에 해당하는 변수가 없다면 계속 모든 체인을 보면서 검사를 해야하기때문에 성능에 영향이 갈 수 있음

// 정리
// 스코프란, 식별자가 유효한 범위를 나타낸다.
// 스코프 밖에서는 스코프 내부에 있는 것에 대해선 접근할 수 없지만, 스코프 내부에서는 외부의 그 어떤 부모의 데이터도 접근할 수 있다.
// 접근할 수 있는 이유는, 각각의 스코프는 렉시컬 환경이라는 곳이 있는데 그 안에 외부 렉시컬 환경 참조를 통해서 (스코프 체인) 찾아가면서 부모의 데이터에 접근 할 수 있기 때문이다.

// 3. 호이스팅 (끌어 올리다~)
// 자바스크립트 엔진(번역기, Interpreter)이 코드를 실행하기 전, 변수, 함수, 클래스의 선언문을 끌어올리는 것을 말함
// 변수의 선언과 초기화를 분리한 후, 선언만 코드의 최상단으로 옮김
